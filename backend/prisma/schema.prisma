generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id                String             @id @default(uuid())
  //
  username          String             @unique
  email             String             @unique
  password          String
  role              Role               @default(MEMBER)
  isActive          Boolean            @default(false)
  //
  pinnedPortfolios  Portfolio[]        @relation("PinnedByUser")
  //
  UserProfile       UserProfile?
  Portfolios        Portfolio[]        @relation("UserPortfolio")
  PortfolioVotes    PortfolioVote[]
  PortfolioComments PortfolioComment[]
  RefreshTokens     RefreshToken[]
  OneTimePasswords  OneTimePassword[]
  //
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum OneTimePasswordType {
  LOGIN
  RESET_PASSWORD
  CHANGE_EMAIL
}

model OneTimePassword {
  id        String              @id @default(uuid())
  //
  password  String              @unique
  type      OneTimePasswordType
  expiredAt DateTime
  userId    String?
  //
  User      User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model RefreshToken {
  id          String   @id @default(uuid())
  //
  hashedToken String   @unique
  revoked     Boolean  @default(false)
  userId      String?
  //
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProfile {
  id        String   @id @default(uuid())
  //
  avatar    String?
  fullName  String?
  bio       String?
  userId    String   @unique
  //
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id              String             @id @default(uuid())
  //
  name            String
  description     String?
  isPublic        Boolean            @default(true)
  pinnedBy        User[]             @relation("PinnedByUser")
  ownerId         String?
  //
  PorfolioProfile PortfolioProfile?
  Votes           PortfolioVote[]
  Comments        PortfolioComment[]

  Connect        PortfolioConnect[]
  TechincalSkill TechincalSkill[]
  //
  Owner          User?              @relation("UserPortfolio", fields: [ownerId], references: [id], onDelete: SetNull)
  //
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model PortfolioProfile {
  id         String    @id @default(uuid())
  //
  logo       String?
  banner     String?
  fullName   String?
  label      String?
  nickname   String?
  about      String?
  country    String?
  email      String?
  phone      String?
  website    String?
  porfolioId String    @unique
  //
  Porfolio   Portfolio @relation(fields: [porfolioId], references: [id], onDelete: Cascade)
  //
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model PortfolioVote {
  id          String    @id @default(uuid())
  //
  isLike      Boolean   @default(true)
  userId      String?
  portfolioId String
  //
  User        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  //
  @@unique([userId, portfolioId], name: "UserPortfolioVote")
}

model PortfolioComment {
  id          String    @id @default(uuid())
  //
  content     String?
  userId      String?
  portfolioId String
  //
  User        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SocialMedia {
  id        Int                @id @default(autoincrement())
  //
  name      String
  url       String
  //
  Connect   PortfolioConnect[]
  //
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model PortfolioConnect {
  id            String       @id @default(uuid())
  //
  identifier    String
  socialMediaId Int
  portfolioId   String
  //
  SocialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  Porfolio      Portfolio    @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model TechincalSkill {
  id          Int         @id @default(autoincrement())
  //
  name        String
  description String
  //
  Porfolio    Portfolio[]
  //
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Institution {
  id          Int                  @id @default(autoincrement())
  //
  name        String
  description String
  website     String
  //
  Education   PortfolioEducation[]
  //
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model PortfolioEducation {
  id            Int         @id @default(autoincrement())
  //
  score         Float
  institutionId Int
  //
  Institution   Institution @relation(fields: [institutionId], references: [id])
  //
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
