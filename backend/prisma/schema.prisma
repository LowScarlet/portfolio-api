generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id                String             @id @default(uuid())
  //
  username          String             @unique
  email             String             @unique
  password          String
  role              Role               @default(MEMBER)
  isActive          Boolean            @default(false)
  //
  pinnedPortfolios  Portfolio[]        @relation("PinnedByUser")
  //
  UserProfile       UserProfile?
  Portfolios        Portfolio[]        @relation("UserPortfolio")
  PortfolioVotes    PortfolioVote[]
  PortfolioComments PortfolioComment[]
  RefreshTokens     RefreshToken[]
  OneTimePasswords  OneTimePassword[]
  //
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum OneTimePasswordType {
  LOGIN
  RESET_PASSWORD
  CHANGE_EMAIL
}

model OneTimePassword {
  id        String              @id @default(uuid())
  //
  password  String              @unique
  type      OneTimePasswordType
  expiredAt DateTime
  userId    String?
  //
  User      User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model RefreshToken {
  id          String   @id @default(uuid())
  //
  hashedToken String   @unique
  revoked     Boolean  @default(false)
  userId      String?
  //
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProfile {
  id        String   @id @default(uuid())
  //
  avatar    String?
  fullName  String?
  bio       String?
  userId    String   @unique
  //
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id               String             @id @default(uuid())
  //
  name             String
  description      String?
  isPublic         Boolean            @default(true)
  pinnedBy         User[]             @relation("PinnedByUser")
  ownerId          String?
  //
  PortfolioProfile PortfolioProfile?
  Votes            PortfolioVote[]
  Comments         PortfolioComment[]

  Connect        PortfolioConnect[]
  TechincalSkill PortfolioTechincalSkill[]
  Education      PortfolioEducation[]
  //
  Owner          User?                     @relation("UserPortfolio", fields: [ownerId], references: [id], onDelete: SetNull)
  //
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
}

model PortfolioProfile {
  id          String    @id @default(uuid())
  //
  logo        String?
  banner      String?
  fullName    String?
  label       String?
  nickname    String?
  about       String?
  country     String?
  email       String?
  phone       String?
  website     String?
  portfolioId String    @unique
  //
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PortfolioVote {
  id          String    @id @default(uuid())
  //
  isLike      Boolean   @default(true)
  userId      String?
  portfolioId String
  //
  User        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  //
  @@unique([userId, portfolioId], name: "UserPortfolioVote")
}

model PortfolioComment {
  id          String    @id @default(uuid())
  //
  content     String?
  userId      String?
  portfolioId String
  //
  User        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SocialMedia {
  id         String             @id @default(uuid())
  //
  name       String             @unique
  url        String
  isVerified Boolean            @default(false)
  //
  Connect    PortfolioConnect[]
  //
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model PortfolioConnect {
  id            String      @id @default(uuid())
  //
  identifier    String
  socialMediaId String
  portfolioId   String
  //
  SocialMedia   SocialMedia @relation(fields: [socialMediaId], references: [id])
  Portfolio     Portfolio   @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model TechincalSkill {
  id                      String                    @id @default(uuid())
  //
  name                    String
  description             String?
  isVerified              Boolean                   @default(false)
  //
  PortfolioTechincalSkill PortfolioTechincalSkill[]
  //
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
}

model PortfolioTechincalSkill {
  id               String         @id @default(uuid())
  //
  identifier       String
  techincalSkillId String
  portfolioId      String
  //
  TechincalSkill   TechincalSkill @relation(fields: [techincalSkillId], references: [id])
  Portfolio        Portfolio      @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Institution {
  id          String               @id @default(uuid())
  //
  name        String               @unique
  description String?
  website     String?
  maxScore    Float                @default(4.0)
  //
  Education   PortfolioEducation[]
  //
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Department {
  id          String               @id @default(uuid())
  //
  name        String               @unique
  description String?
  degreeId    String?
  //
  Education   PortfolioEducation[]
  Degree      Degree?              @relation(fields: [degreeId], references: [id])
  //
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Degree {
  id          String       @id @default(uuid())
  //
  name        String       @unique
  description String?
  //
  Department  Department[]
  //
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum DegreeLevel {
  BACHELOR
  MAGISTER
  DOCTORAL
}

enum EducationStatus {
  DROPOUT
  UNGRADUATE
  GRADUATE
  POSTGRADUATE
}

model PortfolioEducation {
  id                String          @id @default(uuid())
  //
  status            EducationStatus @default(GRADUATE)
  degreeLevel       DegreeLevel?
  description       String?
  score             Float?
  dissertationTitle String?
  startAt           DateTime        @default(now())
  endAt             DateTime?
  departmentId      String?
  institutionId     String
  portfolioId       String
  //
  Department        Department?     @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  Institution       Institution     @relation(fields: [institutionId], references: [id])
  Portfolio         Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  //
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Company {
  id          String   @id @default(uuid())
  //
  name        String   @unique
  description String?
  website     String?
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PortfolioWork {
  id                String    @id @default(uuid())
  //
  description       String?
  score             Float?
  dissertationTitle String?
  startAt           DateTime  @default(now())
  endAt             DateTime?
  departmentId      String?
  institutionId     String
  portfolioId       String
  //
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
